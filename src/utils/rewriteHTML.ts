import { getFullHTMLFromDoc } from "./formatHTML";
import { rewriteBareImport } from "./rewriteTS";
import { CDN_ORIGIN } from "./constants";

export function rewriteHTML(html: string, dev?: boolean) {
  const domParser = new DOMParser();
  const doc = domParser.parseFromString(html, "text/html");

  for (const script of doc.querySelectorAll("script")) {
    if (script.innerHTML) {
      const jsCode = script.innerHTML;
      const rewrittenCode = rewriteBareImport(jsCode);
      script.innerHTML = rewrittenCode;
    }
  }

  const docCreateScript = (options: Partial<HTMLScriptElement> = {}) => {
    const script = doc.createElement("script");
    for (const [key, value] of Object.entries(options)) {
      if (value !== undefined) {
        script[key as any] = value;
      }
    }
    return script;
  };

  const docHeadPrepend = (...nodes: Node[]) =>
    doc.head.prepend(doc.createTextNode("\n"), ...nodes, doc.createTextNode("\n"));

  docHeadPrepend(doc.createComment(" Generated by rewriteHTML utility "));

  docHeadPrepend(
    docCreateScript({
      type: "module",
      innerHTML: /*js*/ `import { Hook } from '${CDN_ORIGIN}/console-feed';\nHook(window.console, log => window.parent.postMessage(log));`,
    })
  );

  docHeadPrepend(
    docCreateScript({
      type: "module",
      innerHTML: htmlHelperJs,
    })
  );

  docHeadPrepend(doc.createComment(" Generated by rewriteHTML utility "));

  if (dev)
    docHeadPrepend(
      docCreateScript({
        innerHTML: /*js*/ `
        window.addEventListener('error', function(event) {
          if (event.error) {
            console.error(event.error);
          } else {
            const src = (event.target && (event.target.src || event.target.href)) || event.message;
            console.error('Resource load error:', src);
          }
        }, true);
        window.addEventListener('unhandledrejection', function(event) {
          console.error('Unhandled promise rejection:', event.reason);
        });`,
      })
    );

  return getFullHTMLFromDoc(doc);
}

export function rewriteScript(script: string) {
  let js = rewriteBareImport(script);
  js = JSON.stringify(js);
  js = /*js*/ `window.parent.postMessage({
    method: "result",
    data: [eval(${js})],
})`;

  return /*js*/ `import('data:text/javascript,${encodeURIComponent(js)}').catch(console.error)`;
}

const htmlHelperJs = String.raw/*js*/ `
function require(packageName) {
  if (!packageName) return;
  const [text, url] = fetchTextSync(pkg2url(packageName));
  if (!text) {
    console.error("Fail to load " + url + " when require " + packageName);
    return;
  }
  let fixedText = text;
  for (const req of text.match(/require\(("|')[^\1]+?\1\)/g) || []) {
    const arg = req.match(/require\(("|')([^\1]+?)\1\)/);
    if (arg.length !== 3) continue;
    const path = arg[2];
    if (path.startsWith(".") || path.startsWith("/")) {
      const newPath = new URL(path, url).href;
      fixedText = fixedText.replace(req, "require(" + JSON.stringify(newPath) + ")");
    }
  }
  return execCommonJS(fixedText);
}

function pkg2url(packageName) {
  if (URL.canParse(packageName)) return packageName;
  return "https://unpkg.com/" + packageName;
}

function execCommonJS(sourceCode) {
  const module = {
    id: "<repl>",
    path: ".",
    exports: {},
    filename: null,
    loaded: false,
    children: [],
    paths: [],
  };
  globalThis.process ??= { env: {} };
  Function("module", "exports", sourceCode)(module, module.exports);
  return module.exports;
}

function fetchTextSync(url) {
  const request = new XMLHttpRequest();
  request.open("GET", url, false);
  request.send(null);
  if (request.status === 200) {
    console.info(
      "Loaded " + url + " successfully, status: " + request.status + ", length: " + request.responseText.length
    );
    return [request.responseText, request.responseURL];
  }
  return [, request.responseURL];
}


const srcMap = new Map();

function appendScriptToHead(src) {
  if (srcMap.has(src)) { // If the script is already being loaded, return the existing promise
    return srcMap.get(src);
  }
  const { promise, resolve, reject } = Promise.withResolvers();
  const script = document.createElement("script");
  script.src = src;
  script.onload = resolve;
  script.onerror = reject;
  document.head.append(script);
  srcMap.set(src, promise);
  return promise;
}

function pkg2head(packageName) {
  return appendScriptToHead(pkg2url(packageName));
}

const ESM_PROVIDERS = {
  "esm.run": "https://esm.run",
  "esm.sh": "https://esm.sh",
  skypack: "https://cdn.skypack.dev",
  jspm: "https://jspm.dev",
};

function import$(packageName, attributes = { cdn: "esm.sh" }) {
  if (packageName == undefined) throw new SyntaxError("import$() requires a specifier");
  packageName = String(packageName);
  if (typeof attributes !== "object") throw new TypeError("The second argument to import$() must be an object");
  const cdn = attributes.cdn;

  let url;
  if (/^https?:\/\//.test(packageName)) {
    url = packageName;
  } else if (cdn && cdn.endsWith("/")) {
    url = attributes.cdn + packageName;
  } else {
    const cdnOrigin = ESM_PROVIDERS[cdn];
    if (!cdnOrigin) throw new Error("CDN provider must be one of: " + Object.keys(ESM_PROVIDERS).join(", "));
    url = cdnOrigin + "/" + packageName;
  }

  return import(url, attributes);
}

/**
 * @usage
 * const Vue = require("vue@2")
 */
window.require = require;
/**
 * @usage
 * const React = import$("react")
 */
window.import$ = import$;
/**
 * @usage
 * await pkg2head("vue@3"); console.log(Vue);
 */
window.pkg2head = pkg2head;
`.trim();
